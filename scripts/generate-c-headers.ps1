# Save this as scripts/generate-c-headers.ps1

Write-Host "=== Generating C Headers ===" -ForegroundColor Cyan

# Check if cbindgen is installed
if (-not (Get-Command cbindgen -ErrorAction SilentlyContinue)) {
    Write-Host "Installing cbindgen..." -ForegroundColor Yellow
    cargo install cbindgen
}

# Create headers directory
$headersDir = "c-headers"
New-Item -ItemType Directory -Force -Path $headersDir | Out-Null

# Create cbindgen.toml configuration
$cbindgenConfig = @'
# cbindgen configuration for ZK Proof System

language = "C"
pragma_once = true
autogen_warning = "/* Warning: This file is auto-generated by cbindgen. Do not modify manually. */"
include_version = true
namespace = "zk_proof"
sys_includes = ["stdint.h", "stdbool.h", "stddef.h"]

[export]
include = ["ErrorCode"]
prefix = "ZK_"
item_types = ["enums", "structs", "unions", "typedefs", "opaque", "functions"]

[export.rename]
"ErrorCode" = "ZK_ErrorCode"

[enum]
rename_variants = "ScreamingSnakeCase"
prefix_with_name = true

[fn]
prefix = "zk_proof_"
postfix = ""

[struct]
rename_fields = "snake_case"

[parse]
parse_deps = false
include = []
'@

$cbindgenConfig | Out-File -Encoding UTF8 "bindings/cbindgen.toml"

Write-Host "Generating C headers from bindings module..." -ForegroundColor Yellow

Push-Location bindings
try {
    cbindgen --config cbindgen.toml --output "../$headersDir/zk_proof.h"
    Write-Host "C headers generated successfully!" -ForegroundColor Green
} catch {
    Write-Host "Header generation failed: $_" -ForegroundColor Red
    exit 1
} finally {
    Pop-Location
}

# Generate example C file
$cExample = @'
#include "zk_proof.h"
#include <stdio.h>
#include <stdlib.h>

int main() {
    printf("ZK Proof System C Interface Example\n");
    
    // Example input data
    uint8_t input[] = {1, 2, 3, 4, 5};
    size_t input_len = sizeof(input);
    
    // Allocate output buffer
    uint8_t output[1024];
    size_t output_len = sizeof(output);
    
    // Create proof
    int32_t result = zk_proof_create(input, input_len, output, &output_len);
    
    if (result == 0) {
        printf("Proof created successfully, size: %zu bytes\n", output_len);
        
        // Verify proof
        result = zk_proof_verify(output, output_len);
        
        if (result == 0) {
            printf("Proof verified successfully!\n");
        } else {
            printf("Proof verification failed\n");
        }
    } else {
        printf("Failed to create proof\n");
    }
    
    return 0;
}
'@

$cExample | Out-File -Encoding UTF8 "$headersDir/example.c"

Write-Host "`nC headers generated in: $headersDir/" -ForegroundColor Green
Write-Host "Files created:" -ForegroundColor White
Write-Host "  - zk_proof.h (header file)" -ForegroundColor Gray
Write-Host "  - example.c (usage example)" -ForegroundColor Gray